//  Natron
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#ifndef NATRON_GUI_KNOBUNDOCOMMAND_H_
#define NATRON_GUI_KNOBUNDOCOMMAND_H_

#include <map>
#include <QUndoCommand>

#include "Engine/Variant.h"

class KnobGui;

//================================================================


class KnobMultipleUndosCommand : public QUndoCommand {
    
public:
    
    KnobMultipleUndosCommand(KnobGui* knob,const std::map<int,Variant>& oldValue,const std::map<int,Variant>& newValue,QUndoCommand *parent = 0):QUndoCommand(parent),
    _oldValue(oldValue),
    _newValue(newValue),
    _knob(knob)
    {
    }
    virtual void undo(){
        for(std::map<int,Variant>::const_iterator it = _oldValue.begin();it!=_oldValue.end();++it){
            _knob->setValue(it->first,it->second);
            //maybe we should also attempt to remove the keyframe if we added one in the redo() function ?
            // Anyway the user can remove it by pressing CTRL-Z in the curve editor
        }
        setText(QObject::tr("Set value of %1")
                .arg(_knob->getKnob()->getDescription().c_str()));
    }
    virtual void redo(){
        
        SequenceTime time = _knob->getKnob()->getHolder()->getApp()->getTimeLine()->currentFrame();
        
        for(std::map<int,Variant>::const_iterator it = _newValue.begin();it!=_newValue.end();++it){
            boost::shared_ptr<Curve> c = _knob->getKnob()->getCurve(it->first);
            
            _knob->setValue(it->first,it->second);
            
            if(c->keyFramesCount() >= 1){
                _knob->setKeyframe(time, it->first);
            }
            
        }
        setText(QObject::tr("Set value of %1")
                .arg(_knob->getKnob()->getDescription().c_str()));
    }
    
    
private:
    std::map<int,Variant> _oldValue;
    std::map<int,Variant> _newValue;
    KnobGui* _knob;
};

class KnobUndoCommand : public QUndoCommand{
    
public:
    
    KnobUndoCommand(KnobGui* knob,int dimension,const Variant& oldValue,const Variant& newValue,QUndoCommand *parent = 0)
    :QUndoCommand(parent),
    _dimension(dimension),
    _oldValue(oldValue),
    _newValue(newValue),
    _knob(knob)
    {
        
    }
    
    virtual void undo(){
        
        _knob->setValue(_dimension, _oldValue);
      
        //maybe we should also attempt to remove the keyframe if we added one in the redo() function ?
        // Anyway the user can remove it by pressing CTRL-Z in the curve editor
        
        if(_knob->getKnob()->getDimension() > 1){
            setText(QObject::tr("Set value of %1.%2")
                    .arg(_knob->getKnob()->getDescription().c_str()).arg(_knob->getKnob()->getDimensionName(_dimension).c_str()));
        }else{
            setText(QObject::tr("Set value of %1")
                    .arg(_knob->getKnob()->getDescription().c_str()));
        }
    }
    
    virtual void redo(){
        
        boost::shared_ptr<Curve> c = _knob->getKnob()->getCurve(_dimension);
        SequenceTime time = _knob->getKnob()->getHolder()->getApp()->getTimeLine()->currentFrame();
        _knob->setValue(_dimension, _newValue);
        
        //the curve is animated, attempt to set a keyframe
        if(c->keyFramesCount() >= 1){
            _knob->setKeyframe(time, _dimension);
        }
        
        if(_knob->getKnob()->getDimension() > 1){
            setText(QObject::tr("Set value of %1.%2")
                    .arg(_knob->getKnob()->getDescription().c_str()).arg(_knob->getKnob()->getDimensionName(_dimension).c_str()));
        }else{
            setText(QObject::tr("Set value of %1")
                    .arg(_knob->getKnob()->getDescription().c_str()));
        }
    }
    
    virtual int id() const { return kKnobUndoChangeCommandCompressionID; }
    
    virtual bool mergeWith(const QUndoCommand *command){
        const KnobUndoCommand *knobCommand = dynamic_cast<const KnobUndoCommand*>(command);
        if(!knobCommand || command->id() != id())
            return false;
        
        KnobGui* knob = knobCommand->_knob;
        if(_knob != knob)
            return false;
        _newValue = knobCommand->_newValue;
        return true;
    }
    
private:
    int _dimension;
    Variant _oldValue;
    Variant _newValue;
    KnobGui* _knob;
};

#endif // NATRON_GUI_KNOBUNDOCOMMAND_H_
